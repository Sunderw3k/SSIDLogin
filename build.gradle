plugins {
    id "java"
    id "net.minecraftforge.gradle.forge" version "6f53277"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id 'org.spongepowered.mixin' version "0.6-SNAPSHOT"
    id "net.kyori.blossom" version "1.3.0"
}

group 'net.sunderw'
version = mod_version
archivesBaseName = mod_name

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

blossom {
    replaceToken("@VER@", project.version)
    replaceToken("@NAME@", mod_name)
    replaceToken("@ID@", mod_id)
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
}

configurations {
    implementation.extendsFrom(include)
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url "https://jitpack.io" }
    maven { url "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url = "https://repo.essential.gg/repository/maven-public" }
}

dependencies {
    implementation('org.spongepowered:mixin:0.7.11-SNAPSHOT')
    include('org.spongepowered:mixin:0.7.11-SNAPSHOT')
    annotationProcessor 'org.spongepowered:mixin:0.7.11-SNAPSHOT'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "mcversion", minecraft.version
    inputs.property "name", mod_name
    inputs.property "id", mod_id

    filesMatching("mcmod.info") {
        expand(
                "id": mod_id,
                "name": mod_name,
                "version": version,
                "mcversion": minecraft.version
        )
    }
    filesMatching("mixins.${mod_id}.json") {
        expand("id": mod_id)
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    manifest.attributes(
            'ModSide': 'CLIENT',
            'ForceLoadAsMod': true,
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'MixinConfigs' : "mixins.${mod_id}.json"
    )
}

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv = "searge"
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
}

shadowJar {
    archiveClassifier.set('')
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
        mappingType = 'SEARGE'
    }
}

shadowJar {
    exclude 'module-info.class'
    exclude 'dummyThing'
    exclude 'LICENSE.txt'
    exclude 'README.md'
}

tasks.reobfJar.dependsOn tasks.shadowJar

sourceSets {
    main {
        output.resourcesDir = java.outputDir
        ext.refMap = "mixins.${mod_id}.refmap.json"
    }
}

task moveResources {
    doLast {
        copy {
            Directory fromDir = layout.projectDirectory.dir("src/main/resources")
            Directory toDir = layout.projectDirectory.dir("build/classes/java/resources")
            from fromDir
            into toDir
            logger.debug("Copying resources from $fromDir to $toDir")
        }
    }
}

moveResources.dependsOn processResources
classes.dependsOn moveResources
